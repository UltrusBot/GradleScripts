enum LoaderType {
    FABRIC("fabric", "Fabric"),
    QUILT("quilt", "Quilt"),
    FORGE("forge", "Forge");

    String modrinthName;
    String curseforgeName;

    LoaderType(String modrinthName, String curseforgeName) {
        this.modrinthName = modrinthName;
        this.curseforgeName = curseforgeName;
    }

}
class ModReleaseMetadata {
    String releaseDisplayName;
    File changelogFile;
    String[] minecraftVersions;
    LoaderType[] modLoaders;
    String mainBuildTask;
    String[] additionalBuildTasks;
    String versionTag;
    boolean isTest = false;
    String releaseType;

    String cfToken;
    String mrToken;
    String ghToken;
    static ModReleaseMetadata create(
            String releaseDisplayName,
            File changelogFile,
            ArrayList<String> minecraftVersions,
            ArrayList<String> modLoaders,
            String mainBuildTask,
            ArrayList<String> additionalBuildTasks,
            String versionTag,
            boolean isTest,
            String CF_TOKEN,
            String MR_TOKEN,
            String GH_TOKEN,
            String releaseType) {
        var metadata = new ModReleaseMetadata()
        metadata.releaseDisplayName = releaseDisplayName
        metadata.changelogFile = changelogFile
        metadata.minecraftVersions = minecraftVersions
        metadata.modLoaders = modLoaders.collect { LoaderType.valueOf(it.toUpperCase()) }
        metadata.mainBuildTask = mainBuildTask
        metadata.additionalBuildTasks = additionalBuildTasks
        metadata.versionTag = versionTag
        metadata.isTest = isTest
        metadata.cfToken = CF_TOKEN
        metadata.mrToken = MR_TOKEN
        metadata.ghToken = GH_TOKEN
        metadata.releaseType = releaseType
        return metadata
    }
}

ext.createModReleaseMetadata = {
    String releaseDisplayName,
    File changelogFile,
    ArrayList<String> minecraftVersions,
    ArrayList<String> modLoaders,
    String mainBuildTask,
    ArrayList<String> additionalBuildTasks,
    String versionTag,
    boolean isTest = false,
    String releaseType = "release",
    String CF_TOKEN = System.getenv("CF_API_KEY"),
    String MR_TOKEN = System.getenv("MODRINTH_TOKEN"),
    String GH_TOKEN = System.getenv("GH_TOKEN")
        ->
        return ModReleaseMetadata.create(
                releaseDisplayName,
                changelogFile,
                minecraftVersions,
                modLoaders,
                mainBuildTask,
                additionalBuildTasks,
                versionTag,
                isTest,
                CF_TOKEN,
                MR_TOKEN,
                GH_TOKEN,
                releaseType
        )
}
ext.modrinthInfo = {ModReleaseMetadata modData, String modrinthProjectId, ArrayList<String> requiredProjects = [], ArrayList<String> optionalProjects = [], ArrayList<String> incompatibleProjects = [], ArrayList<String> embeddedProjects = [] ->
    modrinth {
        if (modData.mrToken != null) {
            token = modData.mrToken
        }
        projectId = modrinthProjectId
        versionType = modData.releaseType
        uploadFile = tasks.getByName(modData.mainBuildTask)
        changelog = modData.changelogFile.getText('UTF-8')
        versionNumber = modData.versionTag
        versionName = modData.releaseDisplayName
        gameVersions = modData.minecraftVersions.toList()
        loaders = modData.modLoaders.collect { it.modrinthName }.asList()
        if (requiredProjects.size() > 0 || optionalProjects.size() > 0 || incompatibleProjects.size() > 0 || embeddedProjects.size() > 0) {
            dependencies {
                requiredProjects.collect { required.project(it) }
                optionalProjects.collect { optional.project(it) }
                incompatibleProjects.collect { incompatible.project(it) }
                embeddedProjects.collect { embedded.project(it) }
            }
        }
        debugMode = modData.isTest
    }
}
ext.githubInfo = {ModReleaseMetadata modData, String githubOwner, String githubRepo, String branch ->
    var githubTasks = []
    githubTasks.add(tasks.getByName(modData.mainBuildTask))
    for (taskName in modData.additionalBuildTasks) {
        githubTasks.add(tasks.getByName(taskName))
    }
    githubRelease {
        if (modData.ghToken != null) {
            authorization = "Token ${modData.ghToken}"
        }
        owner = githubOwner
        repo = githubRepo
        targetCommitish = branch
        tagName = modData.versionTag
        releaseName = modData.releaseDisplayName
        body = modData.changelogFile.getText('UTF-8')
        releaseAssets = githubTasks
        dryRun = modData.isTest
    }
}
// Yes, the passed object thing is cursed, but it works. Should probably figure out a better solution at some point.
ext.curseforgeInfo = {ModReleaseMetadata modData, Object taskType, String curseforgeProjectId, ArrayList<String> embeddedLibraries = [], ArrayList<String> requiredLibraries = [], ArrayList<String> optionalLibraries = [] ->
    task publishCurseForge(type: taskType) {
        if (modData.cfToken != null) {
            apiToken = modData.cfToken
        }
        def mainFile = upload(curseforgeProjectId, tasks.getByName(modData.mainBuildTask))
        mainFile.releaseType = modData.releaseType
        mainFile.changelog = modData.changelogFile.getText('UTF-8')
        mainFile.changelogType = 'markdown'
        for (version in modData.minecraftVersions) {
            mainFile.addGameVersion(version)
        }
        for (loader in modData.modLoaders) {
            mainFile.addModLoader(loader.curseforgeName)
        }
        mainFile.displayName = modData.releaseDisplayName
        if (requiredLibraries.size() > 0) {
            requiredLibraries.collect { mainFile.addRequirement(it) }
        }
        if (optionalLibraries.size() > 0) {
            optionalLibraries.collect { mainFile.addOptional(it) }
        }
        if (embeddedLibraries.size() > 0) {
            embeddedLibraries.collect { mainFile.addEmbedded(it) }
        }
        debugMode = modData.isTest
    }
}

/**
 **Example usage:**
 > in build.gradle
 var mod = createModReleaseMetadata(
 "Spleaves $project.version Fabric/Quilt",
 file("$rootDir/CHANGELOG.md"),
 ["1.19.2"],
 ["fabric", "quilt"],
 "remapJar",
 ["sourcesJar", "javadocJar"],
 "v${project.version}-fabric",
 true
 )
 modrinthInfo(mod, "spleaves")
 githubInfo(mod, "UltrusBot", "Spleaves", "1.19.2")
 curseforgeInfo(mod, TaskPublishCurseForge, "856291")

 */
